---
- name: Ensure acme user exists
  become: True
  user:
    name: "{{ acme_sh_user }}"
    createhome: yes
    home: "/home/{{ acme_sh_user }}"
  when: acme_sh_user != 'root'

- name: Set homedir
  set_fact:
    acme_sh_homedir: "{% if acme_sh_user == 'root' %}/root{% else %}/home/{{ acme_sh_user }}{% endif %}"

- name: Install dependencies
  become: True
  apt:
    name:
      - acl
      - curl
      - socat
      - git
      - cron
      - sudo
    install_recommends: no
    state: present

- name: Ensure acme user may execute reload commands
  become: True
  lineinfile:
    dest: /etc/sudoers
    regexp: "^{{ acme_sh_user }}"
    line: "{{ acme_sh_user }}\tALL=(root) NOPASSWD: {{ acme_sh_user_sudo_commands | join(', ') }}"
    state: present
    validate: "visudo -cf %s"
  when: acme_sh_user_sudo_commands != []

- block:
    - name: Clone the acme.sh repository
      git:
        repo: "https://github.com/Neilpang/acme.sh"
        dest: "{{ acme_sh_homedir }}/acme.sh"
        version: "{{ acme_sh_version }}"
      register: acme_sh_clone

    - name: Install acme.sh
      shell: >
        ./acme.sh --install
      args:
        chdir: "{{ acme_sh_homedir }}/acme.sh"
      when: acme_sh_clone.changed

    - name: Prepare installation directory
      file:
        path: "{{ acme_sh_homedir }}/certs"
        owner: "{{ acme_sh_cert_group|default(acme_sh_user) }}"
        state: directory

    - name: Configure acme.sh
      lineinfile:
        path: "~/.acme.sh/account.conf"
        regexp: "{{ item.key }}=.*"
        line: "{{ item.key }}='{{ item.value }}'"
        state: present
      with_items: "{{ acme_sh_config_vars }}"

    - name: Issue certificates
      shell: >
        {{ acme_sh_homedir }}/.acme.sh/acme.sh --issue
        {% if acme_sh_staging %}--staging {% endif %}
        -d {{ item.primary_domain }}
        {% if item.webroot is defined %}-w {{ item.webroot }} {% elif item.dns_provider is defined %}--dns {{ item.dns_provider }} {% else %}--standalone {% endif %}
        {% for domain in item.additional_domains|default([]) %}-d {{ domain }} {% endfor %}
        --keylength ec-384
      args:
        executable: /bin/bash
      register: acme_sh_issue_certificates
      failed_when: ( result.rc not in [0, 2] )
      changed_when: ( result.rc not in [2] )
      with_items: "{{ acme_sh_certificates }}"

    - name: Install certificates
      shell: >
        {{ acme_sh_homedir }}/.acme.sh/acme.sh --force --install-cert
        -d {{ item.primary_domain }} --ecc
        --fullchain-file {{ acme_sh_homedir }}/certs/{{ item.primary_domain }}.pem
        --key-file {{ acme_sh_homedir }}/certs/{{ item.primary_domain }}.key
        {% if item.reloadcmd is defined %}--reloadcmd "{{ item.reloadcmd }}"{% endif %}
      args:
        executable: /bin/bash
      with_items:
        - "{{ acme_sh_certificates }}"

  become: true
  become_user: "{{ acme_sh_user }}"
